[
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "get_tasks",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def get_tasks():\n    return jsonify(tasks)\n@app.route(\"/tasks\", methods=[\"POST\"])\ndef create_task():\n    global task_id_counter\n    data = request.get_json()\n    task = {\n        \"id\": task_id_counter,\n        \"name\": data[\"name\"],\n        \"description\": data[\"description\"],",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "create_task",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def create_task():\n    global task_id_counter\n    data = request.get_json()\n    task = {\n        \"id\": task_id_counter,\n        \"name\": data[\"name\"],\n        \"description\": data[\"description\"],\n        \"complexity\": data.get(\"complexity\", \"medium\"),\n    }\n    tasks.append(task)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "update_task",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def update_task(task_id):\n    data = request.get_json()\n    for task in tasks:\n        if task[\"id\"] == task_id:\n            task.update(data)\n            return jsonify(task)\n    return jsonify({\"error\": \"Task not found\"}), 404\n@app.route(\"/tasks/<int:task_id>\", methods=[\"DELETE\"])\ndef delete_task(task_id):\n    global tasks",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "delete_task",
        "kind": 2,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "def delete_task(task_id):\n    global tasks\n    tasks = [task for task in tasks if task[\"id\"] != task_id]\n    return \"\", 204\nif __name__ == \"__main__\":\n    app.run(debug=True, port=5000)",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\ntasks = []\ntask_id_counter = 1\n@app.route(\"/tasks\", methods=[\"GET\"])\ndef get_tasks():\n    return jsonify(tasks)\n@app.route(\"/tasks\", methods=[\"POST\"])\ndef create_task():\n    global task_id_counter",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "tasks",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "tasks = []\ntask_id_counter = 1\n@app.route(\"/tasks\", methods=[\"GET\"])\ndef get_tasks():\n    return jsonify(tasks)\n@app.route(\"/tasks\", methods=[\"POST\"])\ndef create_task():\n    global task_id_counter\n    data = request.get_json()\n    task = {",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "task_id_counter",
        "kind": 5,
        "importPath": "backend.app",
        "description": "backend.app",
        "peekOfCode": "task_id_counter = 1\n@app.route(\"/tasks\", methods=[\"GET\"])\ndef get_tasks():\n    return jsonify(tasks)\n@app.route(\"/tasks\", methods=[\"POST\"])\ndef create_task():\n    global task_id_counter\n    data = request.get_json()\n    task = {\n        \"id\": task_id_counter,",
        "detail": "backend.app",
        "documentation": {}
    },
    {
        "label": "_Known",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _Known:\n    def __init__(self):\n        self.key = []\n        self.value = []\nclass _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "class _String:\n    def __init__(self, value):\n        self.value = value\ndef _array_keys(value):\n    keys = []\n    i = 0\n    for _ in value:\n        keys.append(i)\n        i += 1\n    return keys",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "parse",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def parse(value, *args, **kwargs):\n    json = _json.loads(value, *args, **kwargs)\n    wrapped = []\n    for value in json:\n        wrapped.append(_wrap(value))\n    input = []\n    for value in wrapped:\n        if isinstance(value, _String):\n            input.append(value.value)\n        else:",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    },
    {
        "label": "stringify",
        "kind": 2,
        "importPath": "frontend.node_modules.flatted.python.flatted",
        "description": "frontend.node_modules.flatted.python.flatted",
        "peekOfCode": "def stringify(value, *args, **kwargs):\n    known = _Known()\n    input = []\n    output = []\n    i = int(_index(known, input, value))\n    while i < len(input):\n        output.append(_transform(known, input, input[i]))\n        i += 1\n    return _json.dumps(output, *args, **kwargs)",
        "detail": "frontend.node_modules.flatted.python.flatted",
        "documentation": {}
    }
]